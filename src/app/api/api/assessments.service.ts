/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssessmentFindRequest } from '../model/assessmentFindRequest';
import { AssessmentPagingResource } from '../model/assessmentPagingResource';
import { AssessmentResource } from '../model/assessmentResource';
import { AssessmentStoreRequest } from '../model/assessmentStoreRequest';
import { AssessmentUpdateRequest } from '../model/assessmentUpdateRequest';
import { AssessmentsResource } from '../model/assessmentsResource';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssessmentsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete Assessment
     * Deletes a single Assessment
     * @param id Assessment id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAssessment(id: number, observe?: 'body', reportProgress?: boolean): Observable<AssessmentResource>;
    public deleteAssessment(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentResource>>;
    public deleteAssessment(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentResource>>;
    public deleteAssessment(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAssessment.');
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<AssessmentResource>(`${this.basePath}/api/assessments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find assessments by vulnerability id, asset id, system group id, company id
     * 
     * @param vulnerability_id Vulnerability id
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAssessments(vulnerability_id: number, body?: AssessmentFindRequest, observe?: 'body', reportProgress?: boolean): Observable<AssessmentsResource>;
    public findAssessments(vulnerability_id: number, body?: AssessmentFindRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentsResource>>;
    public findAssessments(vulnerability_id: number, body?: AssessmentFindRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentsResource>>;
    public findAssessments(vulnerability_id: number, body?: AssessmentFindRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vulnerability_id === null || vulnerability_id === undefined) {
            throw new Error('Required parameter vulnerability_id was null or undefined when calling findAssessments.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (vulnerability_id !== undefined && vulnerability_id !== null) {
            queryParameters = queryParameters.set('vulnerability_id', <any>vulnerability_id);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AssessmentsResource>(`${this.basePath}/api/assessments/find`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists assessments
     * 
     * @param page Page number
     * @param count Number of items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAssessments(page?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<AssessmentPagingResource>;
    public listAssessments(page?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentPagingResource>>;
    public listAssessments(page?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentPagingResource>>;
    public listAssessments(page?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AssessmentPagingResource>(`${this.basePath}/api/assessments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Assessment information
     * Returns Assessment data
     * @param id Assessment id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public showAssessment(id: number, observe?: 'body', reportProgress?: boolean): Observable<AssessmentResource>;
    public showAssessment(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentResource>>;
    public showAssessment(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentResource>>;
    public showAssessment(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showAssessment.');
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AssessmentResource>(`${this.basePath}/api/assessments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a new assessment
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeAssessment(body?: AssessmentStoreRequest, observe?: 'body', reportProgress?: boolean): Observable<AssessmentResource>;
    public storeAssessment(body?: AssessmentStoreRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentResource>>;
    public storeAssessment(body?: AssessmentStoreRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentResource>>;
    public storeAssessment(body?: AssessmentStoreRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AssessmentResource>(`${this.basePath}/api/assessments`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a new assessment
     * 
     * @param vulnerability_id Vulnerability id
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeAssessmentVulnerability(vulnerability_id: number, body?: AssessmentStoreRequest, observe?: 'body', reportProgress?: boolean): Observable<AssessmentResource>;
    public storeAssessmentVulnerability(vulnerability_id: number, body?: AssessmentStoreRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentResource>>;
    public storeAssessmentVulnerability(vulnerability_id: number, body?: AssessmentStoreRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentResource>>;
    public storeAssessmentVulnerability(vulnerability_id: number, body?: AssessmentStoreRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vulnerability_id === null || vulnerability_id === undefined) {
            throw new Error('Required parameter vulnerability_id was null or undefined when calling storeAssessmentVulnerability.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (vulnerability_id !== undefined && vulnerability_id !== null) {
            queryParameters = queryParameters.set('vulnerability_id', <any>vulnerability_id);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AssessmentResource>(`${this.basePath}/api/assessments/store-assessment/vulnerability`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Assessment information
     * Returns updated Assessment data
     * @param id Assessment id
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAssessment(id: number, body?: AssessmentUpdateRequest, observe?: 'body', reportProgress?: boolean): Observable<AssessmentResource>;
    public updateAssessment(id: number, body?: AssessmentUpdateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssessmentResource>>;
    public updateAssessment(id: number, body?: AssessmentUpdateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssessmentResource>>;
    public updateAssessment(id: number, body?: AssessmentUpdateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAssessment.');
        }


        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<AssessmentResource>(`${this.basePath}/api/assessments/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
