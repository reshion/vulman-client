/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BaseSeverityCountResponse } from '../model/baseSeverityCountResponse';
import { VulnerabilityPagingResource } from '../model/vulnerabilityPagingResource';
import { VulnerabilityResource } from '../model/vulnerabilityResource';
import { VulnerabilityStoreRequest } from '../model/vulnerabilityStoreRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class VulnerabilitiesService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete Vulnerability
     * Deletes a single Vulnerability
     * @param id Vulnerability id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVulnerability(id: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityResource>;
    public deleteVulnerability(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityResource>>;
    public deleteVulnerability(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityResource>>;
    public deleteVulnerability(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteVulnerability.');
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<VulnerabilityResource>(`${this.basePath}/api/vulnerabilities/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Base severity count by asset
     * Get summery of base severity information by asset
     * @param assetId Asset id
     * @param scan_import_job_id Scan import job id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBaseSeverityByAsset(assetId: number, scan_import_job_id?: number, observe?: 'body', reportProgress?: boolean): Observable<BaseSeverityCountResponse>;
    public getBaseSeverityByAsset(assetId: number, scan_import_job_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BaseSeverityCountResponse>>;
    public getBaseSeverityByAsset(assetId: number, scan_import_job_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BaseSeverityCountResponse>>;
    public getBaseSeverityByAsset(assetId: number, scan_import_job_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling getBaseSeverityByAsset.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (scan_import_job_id !== undefined && scan_import_job_id !== null) {
            queryParameters = queryParameters.set('scan_import_job_id', <any>scan_import_job_id);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BaseSeverityCountResponse>(`${this.basePath}/api/vulnerabilities/base-severity/asset/${encodeURIComponent(String(assetId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Base severity count by system group
     * Get summery of base severity information by system group
     * @param systemGroupId System group id
     * @param scan_import_job_id Scan import job id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBaseSeverityBySystemGroup(systemGroupId: number, scan_import_job_id?: number, observe?: 'body', reportProgress?: boolean): Observable<BaseSeverityCountResponse>;
    public getBaseSeverityBySystemGroup(systemGroupId: number, scan_import_job_id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BaseSeverityCountResponse>>;
    public getBaseSeverityBySystemGroup(systemGroupId: number, scan_import_job_id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BaseSeverityCountResponse>>;
    public getBaseSeverityBySystemGroup(systemGroupId: number, scan_import_job_id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (systemGroupId === null || systemGroupId === undefined) {
            throw new Error('Required parameter systemGroupId was null or undefined when calling getBaseSeverityBySystemGroup.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (scan_import_job_id !== undefined && scan_import_job_id !== null) {
            queryParameters = queryParameters.set('scan_import_job_id', <any>scan_import_job_id);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BaseSeverityCountResponse>(`${this.basePath}/api/vulnerabilities/base-severity/system-group/${encodeURIComponent(String(systemGroupId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get vulerabilities by company
     * Get vulerabilities by company
     * @param page Page number
     * @param count Number of items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByCompany(page?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityPagingResource>;
    public getByCompany(page?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityPagingResource>>;
    public getByCompany(page?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityPagingResource>>;
    public getByCompany(page?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VulnerabilityPagingResource>(`${this.basePath}/api/vulnerabilities/company`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get vulerabilities by company
     * Get vulerabilities by company
     * @param scan_import_job_id Scan import job id
     * @param page Page number
     * @param count Number of items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByCompanyWithAssetCount(scan_import_job_id?: number, page?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityPagingResource>;
    public getByCompanyWithAssetCount(scan_import_job_id?: number, page?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityPagingResource>>;
    public getByCompanyWithAssetCount(scan_import_job_id?: number, page?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityPagingResource>>;
    public getByCompanyWithAssetCount(scan_import_job_id?: number, page?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (scan_import_job_id !== undefined && scan_import_job_id !== null) {
            queryParameters = queryParameters.set('scan_import_job_id', <any>scan_import_job_id);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VulnerabilityPagingResource>(`${this.basePath}/api/vulnerabilities/company/asset-count/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Vulnerabilities by asset
     * Get vulnerabilities by asset
     * @param assetId Asset id
     * @param scan_import_job_id Scan import job id
     * @param page Page number
     * @param count Number of items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVulnerabilitiesByAsset(assetId: number, scan_import_job_id?: number, page?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityPagingResource>;
    public getVulnerabilitiesByAsset(assetId: number, scan_import_job_id?: number, page?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityPagingResource>>;
    public getVulnerabilitiesByAsset(assetId: number, scan_import_job_id?: number, page?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityPagingResource>>;
    public getVulnerabilitiesByAsset(assetId: number, scan_import_job_id?: number, page?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling getVulnerabilitiesByAsset.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (scan_import_job_id !== undefined && scan_import_job_id !== null) {
            queryParameters = queryParameters.set('scan_import_job_id', <any>scan_import_job_id);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VulnerabilityPagingResource>(`${this.basePath}/api/vulnerabilities/asset/${encodeURIComponent(String(assetId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Vulnerabilities by system group
     * Get vulnerabilities by system group
     * @param systemGroupId System group id
     * @param scan_import_job_id Scan import job id
     * @param page Page number
     * @param count Number of items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVulnerabilitiesBySystemGroup(systemGroupId: number, scan_import_job_id?: number, page?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityPagingResource>;
    public getVulnerabilitiesBySystemGroup(systemGroupId: number, scan_import_job_id?: number, page?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityPagingResource>>;
    public getVulnerabilitiesBySystemGroup(systemGroupId: number, scan_import_job_id?: number, page?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityPagingResource>>;
    public getVulnerabilitiesBySystemGroup(systemGroupId: number, scan_import_job_id?: number, page?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (systemGroupId === null || systemGroupId === undefined) {
            throw new Error('Required parameter systemGroupId was null or undefined when calling getVulnerabilitiesBySystemGroup.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (scan_import_job_id !== undefined && scan_import_job_id !== null) {
            queryParameters = queryParameters.set('scan_import_job_id', <any>scan_import_job_id);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VulnerabilityPagingResource>(`${this.basePath}/api/vulnerabilities/system-group/${encodeURIComponent(String(systemGroupId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lists vulnerabilities
     * 
     * @param page Page number
     * @param count Number of items per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVulnerabilities(page?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityPagingResource>;
    public listVulnerabilities(page?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityPagingResource>>;
    public listVulnerabilities(page?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityPagingResource>>;
    public listVulnerabilities(page?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VulnerabilityPagingResource>(`${this.basePath}/api/vulnerabilities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Vulnerability information
     * Returns Vulnerability data
     * @param id Vulnerability id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public showVulnerability(id: number, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityResource>;
    public showVulnerability(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityResource>>;
    public showVulnerability(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityResource>>;
    public showVulnerability(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showVulnerability.');
        }

        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VulnerabilityResource>(`${this.basePath}/api/vulnerabilities/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a new vulnerability
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeVulnerability(body?: VulnerabilityStoreRequest, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityResource>;
    public storeVulnerability(body?: VulnerabilityStoreRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityResource>>;
    public storeVulnerability(body?: VulnerabilityStoreRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityResource>>;
    public storeVulnerability(body?: VulnerabilityStoreRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VulnerabilityResource>(`${this.basePath}/api/vulnerabilities`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Vulnerability information
     * Returns updated Vulnerability data
     * @param id Vulnerability id
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVulnerability(id: number, body?: VulnerabilityStoreRequest, observe?: 'body', reportProgress?: boolean): Observable<VulnerabilityResource>;
    public updateVulnerability(id: number, body?: VulnerabilityStoreRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VulnerabilityResource>>;
    public updateVulnerability(id: number, body?: VulnerabilityStoreRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VulnerabilityResource>>;
    public updateVulnerability(id: number, body?: VulnerabilityStoreRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateVulnerability.');
        }


        let headers = this.defaultHeaders;

        // authentication (sanctum) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<VulnerabilityResource>(`${this.basePath}/api/vulnerabilities/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
