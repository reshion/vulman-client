/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Type, Expose } from 'class-transformer';
// @dynamic

import { AssessmentLifecycleStatus } from './assessmentLifecycleStatus';
import { AssessmentTreatment } from './assessmentTreatment';
import { RiskResponseLifecycleStatus } from './riskResponseLifecycleStatus';

import { Observable }                                        from 'rxjs';
import { AbstractControl, FormControl, FormGroup, FormArray, Validators }                            from '@angular/forms';

export class AssessmentUpdateRequest { 


    /**
     * Note of the Assessment
     */
    @Expose()
    note!: string;
    @Expose()
    treatment!: AssessmentTreatment;
    @Expose()
    lifecycle_status!: AssessmentLifecycleStatus;
    /**
     * Risk Response of the Assessment
     */
    @Expose()
    risk_response!: string;
    @Expose()
    risk_response_lifecycle_status!: RiskResponseLifecycleStatus;

    /**
     * Description: Note of the Assessment
     * datatype: string
     * datatypeWithEnum: string
     * note: string   
     */
    /**
     * datatype: AssessmentTreatment
     * datatypeWithEnum: AssessmentTreatment
     * treatment: AssessmentTreatment   
     */
    /**
     * datatype: AssessmentLifecycleStatus
     * datatypeWithEnum: AssessmentLifecycleStatus
     * lifecycle_status: AssessmentLifecycleStatus   
     */
    /**
     * Description: Risk Response of the Assessment
     * datatype: string
     * datatypeWithEnum: string
     * risk_response: string   
     */
    /**
     * datatype: RiskResponseLifecycleStatus
     * datatypeWithEnum: RiskResponseLifecycleStatus
     * risk_response_lifecycle_status: RiskResponseLifecycleStatus   
     */

    // validations?: Map<string, Array<{[key: string]: string}>> = new Map<string, Array<{[key: string]: string}>>();

    constructor(init: Partial<AssessmentUpdateRequest> = {}) {
         
            
                    init.note ? this.note = init.note : null,
               
                        init.treatment ? this.treatment = init.treatment : null,
                        init.lifecycle_status ? this.lifecycle_status = init.lifecycle_status : null,
            
                    init.risk_response ? this.risk_response = init.risk_response : null,
               
                        init.risk_response_lifecycle_status ? this.risk_response_lifecycle_status = init.risk_response_lifecycle_status : null
    }

    static   getForm(data?: AssessmentUpdateRequest | AssessmentUpdateRequest[] | null): FormGroup {


        if(!data) {
            return AssessmentUpdateRequest.getFormGroup(new AssessmentUpdateRequest());
        }

         if(Array.isArray(data)) {
            let arrayForm = new FormArray<any>([]);
            
            if(data.length > 0) {
                arrayForm =  new FormArray<any>(data.map(item => AssessmentUpdateRequest.getFormGroup(item)));                
            }
            return new FormGroup({
                arrayForm
            });        
        } else {
             return  AssessmentUpdateRequest.getFormGroup(data);
        }       
     
    }

     /**
   * Get FormGroup
   *
   * @param {object} data
   * @returns {FormGroup}
   */
  static   getFormGroup(data?: AssessmentUpdateRequest): FormGroup {
       
        return new FormGroup({           
                        note: new FormControl(data?.note, []),
                        treatment: new FormControl(data?.treatment, []),
                        lifecycle_status: new FormControl(data?.lifecycle_status, []),
                        risk_response: new FormControl(data?.risk_response, []),
                        risk_response_lifecycle_status: new FormControl(data?.risk_response_lifecycle_status, [])
        });
    }
  

}