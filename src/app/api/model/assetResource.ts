/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Type, Expose } from 'class-transformer';
// @dynamic

import { Asset } from './asset';

/**
 * model.mustache
 *
 * AssetResource
 */
import { Observable }                                        from 'rxjs';
import { AbstractControl, FormControl, FormGroup, FormArray, Validators }                            from '@angular/forms';

export class AssetResource { 


    @Expose()
    data!: Asset;

    /**
     * datatype: Asset
     * datatypeWithEnum: Asset
     * data: Asset   
     */

    // validations?: Map<string, Array<{[key: string]: string}>> = new Map<string, Array<{[key: string]: string}>>();

    constructor(init: Partial<AssetResource> = {}) {
         
                        this.data = new Asset(init.data || {})
    }

    static   getForm(data?: AssetResource | AssetResource[] | null): FormGroup {


        if(!data) {
            return AssetResource.getFormGroup(new AssetResource());
        }

         if(Array.isArray(data)) {
            let arrayForm = new FormArray<any>([]);
            
            if(data.length > 0) {
                arrayForm =  new FormArray<any>(data.map(item => AssetResource.getFormGroup(item)));                
            }
            return new FormGroup({
                arrayForm
            });        
        } else {
             return  AssetResource.getFormGroup(data);
        }       
     
    }

     /**
   * Get FormGroup
   *
   * @param {object} data
   * @returns {FormGroup}
   */
  static   getFormGroup(data?: AssetResource): FormGroup {
       
        return new FormGroup({           
                        data: (() => { 
                            const fg = Asset.getForm(data?.data);
                            fg.addValidators([]);
                            return fg;
                        })()
        });
    }
  

}