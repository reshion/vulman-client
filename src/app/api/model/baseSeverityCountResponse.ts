/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Type, Expose } from 'class-transformer';
// @dynamic


/**
 * model.mustache
 *
 * BaseSeverityCountResponse
 */
import { Observable }                                        from 'rxjs';
import { AbstractControl, FormControl, FormGroup, FormArray, Validators }                            from '@angular/forms';

export class BaseSeverityCountResponse { 


    /**
     * Crtitical severity count
     */
    @Expose()
    critical!: number;
    /**
     * High severity count
     */
    @Expose()
    high!: number;
    /**
     * Medium severity count
     */
    @Expose()
    medium!: number;
    /**
     * Low severity count
     */
    @Expose()
    low!: number;

    /**
     * Description: Crtitical severity count
     * datatype: number
     * datatypeWithEnum: number
     * critical: number   
     */
    /**
     * Description: High severity count
     * datatype: number
     * datatypeWithEnum: number
     * high: number   
     */
    /**
     * Description: Medium severity count
     * datatype: number
     * datatypeWithEnum: number
     * medium: number   
     */
    /**
     * Description: Low severity count
     * datatype: number
     * datatypeWithEnum: number
     * low: number   
     */

    // validations?: Map<string, Array<{[key: string]: string}>> = new Map<string, Array<{[key: string]: string}>>();

    constructor(init: Partial<BaseSeverityCountResponse> = {}) {
         
            
                    init.critical ? this.critical = init.critical : null,
               
            
                    init.high ? this.high = init.high : null,
               
            
                    init.medium ? this.medium = init.medium : null,
               
            
                    init.low ? this.low = init.low : null
               
    }

    static   getForm(data?: BaseSeverityCountResponse | BaseSeverityCountResponse[] | null): FormGroup {


        if(!data) {
            return BaseSeverityCountResponse.getFormGroup(new BaseSeverityCountResponse());
        }

         if(Array.isArray(data)) {
            let arrayForm = new FormArray<any>([]);
            
            if(data.length > 0) {
                arrayForm =  new FormArray<any>(data.map(item => BaseSeverityCountResponse.getFormGroup(item)));                
            }
            return new FormGroup({
                arrayForm
            });        
        } else {
             return  BaseSeverityCountResponse.getFormGroup(data);
        }       
     
    }

     /**
   * Get FormGroup
   *
   * @param {object} data
   * @returns {FormGroup}
   */
  static   getFormGroup(data?: BaseSeverityCountResponse): FormGroup {
       
        return new FormGroup({           
                        critical: new FormControl(data?.critical, [Validators.pattern('^[0-9]*$')]),
                        high: new FormControl(data?.high, [Validators.pattern('^[0-9]*$')]),
                        medium: new FormControl(data?.medium, [Validators.pattern('^[0-9]*$')]),
                        low: new FormControl(data?.low, [Validators.pattern('^[0-9]*$')])
        });
    }
  

}