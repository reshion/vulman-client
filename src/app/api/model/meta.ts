/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Type, Expose } from 'class-transformer';
// @dynamic


import { Observable }                                        from 'rxjs';
import { AbstractControl, FormControl, FormGroup, FormArray, Validators }                            from '@angular/forms';

export class Meta { 


    /**
     * Current Page of the data
     */
    @Expose()
    current_page!: number;
    /**
     * From
     */
    @Expose()
    from!: number;
    /**
     * Last Page of the data
     */
    @Expose()
    last_page!: number;
    /**
     * Per Page of the data
     */
    @Expose()
    per_page!: number;
    /**
     * To
     */
    @Expose()
    to!: number;
    /**
     * Total
     */
    @Expose()
    total!: number;

    /**
     * Description: Current Page of the data
     * datatype: number
     * datatypeWithEnum: number
     * current_page: number   
     */
    /**
     * Description: From
     * datatype: number
     * datatypeWithEnum: number
     * from: number   
     */
    /**
     * Description: Last Page of the data
     * datatype: number
     * datatypeWithEnum: number
     * last_page: number   
     */
    /**
     * Description: Per Page of the data
     * datatype: number
     * datatypeWithEnum: number
     * per_page: number   
     */
    /**
     * Description: To
     * datatype: number
     * datatypeWithEnum: number
     * to: number   
     */
    /**
     * Description: Total
     * datatype: number
     * datatypeWithEnum: number
     * total: number   
     */

    // validations?: Map<string, Array<{[key: string]: string}>> = new Map<string, Array<{[key: string]: string}>>();

    constructor(init: Partial<Meta> = {}) {
         
            
                    init.current_page ? this.current_page = init.current_page : null,
               
            
                    init.from ? this.from = init.from : null,
               
            
                    init.last_page ? this.last_page = init.last_page : null,
               
            
                    init.per_page ? this.per_page = init.per_page : null,
               
            
                    init.to ? this.to = init.to : null,
               
            
                    init.total ? this.total = init.total : null
               
    }

    static   getForm(data?: Meta | Meta[] | null): FormGroup {


        if(!data) {
            return Meta.getFormGroup(new Meta());
        }

         if(Array.isArray(data)) {
            let arrayForm = new FormArray<any>([]);
            
            if(data.length > 0) {
                arrayForm =  new FormArray<any>(data.map(item => Meta.getFormGroup(item)));                
            }
            return new FormGroup({
                arrayForm
            });        
        } else {
             return  Meta.getFormGroup(data);
        }       
     
    }

     /**
   * Get FormGroup
   *
   * @param {object} data
   * @returns {FormGroup}
   */
  static   getFormGroup(data?: Meta): FormGroup {
       
        return new FormGroup({           
                        current_page: new FormControl(data?.current_page, [Validators.pattern('^[0-9]*$')]),
                        from: new FormControl(data?.from, [Validators.pattern('^[0-9]*$')]),
                        last_page: new FormControl(data?.last_page, [Validators.pattern('^[0-9]*$')]),
                        per_page: new FormControl(data?.per_page, [Validators.pattern('^[0-9]*$')]),
                        to: new FormControl(data?.to, [Validators.pattern('^[0-9]*$')]),
                        total: new FormControl(data?.total, [Validators.pattern('^[0-9]*$')])
        });
    }
  

}