/**
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Type, Expose } from 'class-transformer';
// @dynamic

import { BaseModel } from './baseModel';

/**
 * model.mustache
 *
 * Vulnerability model
 */
import { Observable }                                        from 'rxjs';
import { AbstractControl, FormControl, FormGroup, FormArray, Validators }                            from '@angular/forms';

export class Vulnerability extends BaseModel { 


    /**
     * CVE ID of the vulnerability
     */
    @Expose()
    cve_id!: string;
    /**
     * Details of the vulnerability
     */
    @Expose()
    cve_details!: string;
    /**
     * Optional, the number of assets
     */
    @Expose()
    assets_count!: number;

    /**
     * Description: CVE ID of the vulnerability
     * datatype: string
     * datatypeWithEnum: string
     * cve_id: string   
     */
    /**
     * Description: Details of the vulnerability
     * datatype: string
     * datatypeWithEnum: string
     * cve_details: string   
     */
    /**
     * Description: Optional, the number of assets
     * datatype: number
     * datatypeWithEnum: number
     * assets_count: number   
     */

    // validations?: Map<string, Array<{[key: string]: string}>> = new Map<string, Array<{[key: string]: string}>>();

    constructor(init: Partial<Vulnerability> = {}) {
        super(init)  
            
                    init.cve_id ? this.cve_id = init.cve_id : null,
               
            
                    init.cve_details ? this.cve_details = init.cve_details : null,
               
            
                    init.assets_count ? this.assets_count = init.assets_count : null
               
    }

    static override  getForm(data?: Vulnerability | Vulnerability[] | null): FormGroup {


        if(!data) {
            return Vulnerability.getFormGroup(new Vulnerability());
        }

         if(Array.isArray(data)) {
            let arrayForm = new FormArray<any>([]);
            
            if(data.length > 0) {
                arrayForm =  new FormArray<any>(data.map(item => Vulnerability.getFormGroup(item)));                
            }
            return new FormGroup({
                arrayForm
            });        
        } else {
             return  Vulnerability.getFormGroup(data);
        }       
     
    }

     /**
   * Get FormGroup
   *
   * @param {object} data
   * @returns {FormGroup}
   */
  static override  getFormGroup(data?: Vulnerability): FormGroup {
       
        return new FormGroup({           
                        cve_id: new FormControl(data?.cve_id, []),
                        cve_details: new FormControl(data?.cve_details, []),
                        assets_count: new FormControl(data?.assets_count, [Validators.pattern('^[0-9]*$')])
        });
    }
  

}