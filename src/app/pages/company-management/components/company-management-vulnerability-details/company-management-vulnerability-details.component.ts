import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { ActivatedRoute } from '@angular/router';
import * as API from '@app/api';
import { LoadingOverlayService } from '@app/loading-overlay/loading-overlay.service';
import { UrlAndQueryParamKey } from '@app/shared/enums/url-and-query-param-key';
import { Subscription, map, mergeMap, merge, startWith, switchMap, catchError, of } from 'rxjs';

@Component({
  selector: 'app-company-management-vulnerability-details',
  templateUrl: './company-management-vulnerability-details.component.html',
  styleUrls: ['./company-management-vulnerability-details.component.scss']
})
export class CompanyManagementVulnerabilityDetailsComponent implements OnInit, AfterViewInit
{
  displayedColumns: string[] = ['id', 'fqdn', 'unique_id', 'operating_system', 'actions'];
  totalItems: number = 0;
  dataSource: MatTableDataSource<API.Asset> = new MatTableDataSource<API.Asset>();
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  assets!: API.Asset[];
  vulnerabilitiy!: API.Vulnerability;
  subscriptions = new Subscription();
  constructor(
    private activatedRoute: ActivatedRoute,
    private assetsService: API.AssetsService,
    private assessmentService: API.AssessmentsService,
    private vulnerabilitiesService: API.VulnerabilitiesService,
    private los: LoadingOverlayService,
  ) { }
  ngOnInit() { }
  ngAfterViewInit(): void
  {
    this.los.show();
    this.subscriptions.add(this.activatedRoute.paramMap.pipe(
      map(params =>
      {
        // get and parse int
        const id = params.get(UrlAndQueryParamKey.VULNERABILITY_ID) || '0';
        return parseInt(id, 10);
      }),
      mergeMap(id =>
      {
        return this.vulnerabilitiesService.showVulnerability(id);
      }),

      mergeMap((vulnerability) =>
      {
        this.vulnerabilitiy = vulnerability.data;
        return merge(this.paginator.page, this.sort.sortChange).pipe(
          startWith({}),
          switchMap(() =>
          {
            this.los.show();
            return this.assetsService.getAssetsByVulnerabilityId(
              vulnerability.data.id,
              this.paginator.pageIndex + 1,
              this.paginator.pageSize
            ).pipe(
              catchError(() => of({ data: [], meta: { total: 0 } }))
            );
          }),
        )

      }),
      map(assets =>
      {
        this.totalItems = assets.meta.total;
        this.dataSource.data = assets.data;
      })
    ).subscribe(() =>
    {
      this.los.hide();
    }));
  }
}
